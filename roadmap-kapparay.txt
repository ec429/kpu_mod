Three types of radiation source:
van-allen: ambient, low-energy
solar: directed, medium-energy, inverse-square intensity
galactic: ambient, high-energy, low-rate

van-allen and solar vary with solar activity and (directional) solar storms

On terrestrial planets with magnetosphere and atmosphere, get earthlike behaviour:
(altitudes given for Kerbin, in m)
situation	altitude	van-allen	solar		galactic
sea level	      0		negligible	negligible	negligible
aircraft	  10000		very low	negligible	negligible
upper atmos	  40000		low		very low	negligible
low orbit	  70000		moderate	very low	negligible
		 250000		high		very low	negligible
mid orbit	 600000		very high	low		negligible
		1200000		moderate	moderate	very low
high orbit	2500000		negligible	moderate	low

interplanetary space		none		high		moderate

-----

Effects of radiation strikes:

On shielding, some is absorbed, and gives off heat proportional to energy.
On command pods, has a (very small) chance to harm Kerbals:
	low energy: may cause cancer (Kerbal dies several years later).
	high energy: may cause immediate radiation sickness, imminent death of Kerbal.
On solar panels, degrades cells, reducing power output.
On KPUs, may cause SEUs (e.g. latch changes?  program halts?) or noisy sensor readings.

Perhaps a science experiment that requires to collect k-rad hits?  (Idea stolen from "K-Radiation" forum thread)

-----

Maybe also add a fourth radiation source, LV-N engines.  (But not RTGs, those are well shielded.)

-----

to test: seatExternalCmd; I think we'll still be EVA so that will handle it, and the seat doesn't need a ModuleKappaRayCrewPod

-----

suggested on IRC:
<xShadowx> soundnfury: dont forget a KIS equipable radiation suit
<xShadowx> soundnfury: also can have kerbals go blind from radiation, so on eva screen fades to a grey color, g-effects has a nice example for fading the screen
<xShadowx> soundnfury: and can tap into progeny when taniwha releases, radiation mutates genes
<xShadowx> soundnfury: maybe an interface into testflight or dangit, to justup the failure rate as damage is done

also (timeEfficCurve for solar panels):
<NathanKell> soundnfury: sure it is!
<NathanKell> soundnfury: it evaluates the curve based on (UT - this.launchUT)
<NathanKell> so make launchUT earlier and you increase the effective time it's been in space
<soundnfury> ... ooh, cunning
<NathanKell> (note: you also have to create the timeEfficCurve - stock has a single key = 0 1)
