// Add appropriate amounts of sensors and processing to probe cores & avionics parts in RP-0
// Electric consumption is assumed to be already balanced for each part

// *** Non-control probe cores.  Have only builtins as inputs, and feeble processing power
@PART[SXTSputnik|FASAExplorerProbe|RP0probeSounding0-3m|explorer_6|pioneer_0_1_2|pioneer_3_4|grab-1|tiros-1|transit2a|vanguard-1|vanguard-2|vanguard-3]:NEEDS[RP-0]
{
	MODULE
	{
		name = ModuleKpuProcessor
		hasLevelTrigger = false
		hasLogicOps = false
		hasArithOps = false
		imemWords = 16
	}
}

// TODO *** Command parts (Crewed)
// (especially landers, so we can have 1201 alarms...)

// US Probes
@PART[pioneer_5|pioneer_6_7_8_9]:NEEDS[RP-0] // simple probes, no sensors
{
	MODULE
	{
		name = ModuleKpuProcessor
		hasLevelTrigger = false
		hasLogicOps = false
		hasArithOps = false
		imemWords = 32
	}
}

@PART[pioneer_10_11]:NEEDS[RP-0] // still no sensors, but decent computage now
{
	MODULE
	{
		name = ModuleKpuProcessor
		hasLevelTrigger = false
		hasLogicOps = true
		hasArithOps = false
		imemWords = 64
		timers = 1
	}
}

@PART[neo_ulysses|neo_ds1|neo_near|neo_stardust|rn_new_horizons|rn_voyager|neo_dawn|rn_messenger|magellan|neo_deepimpact|galileo_mb]:NEEDS[RP-0] // late beo probes
{
	MODULE // properly capable processor
	{
		name = ModuleKpuProcessor
		hasLevelTrigger = true
		hasLogicOps = true
		hasArithOps = true
		imemWords = 256
		latches = 2
		timers = 2
	}
	MODULE // full orientation
	{
		name = ModuleKpuOrientation
		customHP = true
		customHPR = true
		inherentRes = 0.01
	}
	MODULE // determine speed from doppler shift of Earth-based signals
	{
		name = ModuleKpuSensor
		sensorType = orbSpeed
		inherentRes = 10
		sensorUnit = m/s
		requireRadio = true
	}
	MODULE // low-res altitude from e.g. LORRI
	{
		name = ModuleKpuSensor
		sensorType = altitude
		inherentRes = 50000
		sensorUnit = m
	}
}

@PART[rn_surveyor3|probeCoreOcto]:NEEDS[RP-0] // early lander (Surveyor)
{
	MODULE
	{
		name = ModuleKpuProcessor
		hasLevelTrigger = false
		hasLogicOps = true
		hasArithOps = false
		imemWords = 128
		latches = 2
		timers = 1
	}
	MODULE // landing radar
	{
		name = ModuleKpuOrientation
		maxAltitude = 10000
		customHP = true
		srfPrograde = true
		srfVertical = true
		inherentRes = 1
	}
	MODULE
	{
		name = ModuleKpuSensor
		maxAltitude = 100000
		srfHeight = true
		inherentRes = 20
		sensorUnit = m
	}
	MODULE
	{
		name = ModuleKpuSensor
		maxAltitude = 10000
		sensorType = srfVerticalSpeed
		inherentRes = 5
		sensorUnit = m/s
	}
}

@PART[eos_aqua|eos_aura|eos_terra|eos_tdrs]:NEEDS[RP-0]
{
	MODULE
	{
		name = ModuleKpuProcessor
		hasLevelTrigger = false
		hasLogicOps = true
		hasArithOps = false
		imemWords = 64
		timers = 1
	}
}

// ** Command parts (uncrewed)
@PART[probeCoreOcto2]:NEEDS[RP-0]
{
	MODULE
	{
		name = ModuleKpuProcessor
		hasLevelTrigger = false
		hasLogicOps = true
		hasArithOps = false
		imemWords = 64
		timers = 1
	}
}

// Ranger / Mariner
@PART[SXTHECSRanger]:NEEDS[RP-0]
{
	MODULE
	{
		name = ModuleKpuProcessor
		hasLevelTrigger = false
		hasLogicOps = true
		hasArithOps = true
		imemWords = 64
		latches = 1
		timers = 1
	}
	MODULE // some orientation
	{
		name = ModuleKpuOrientation
		orbVertical = true
		inherentRes = 1
	}
	MODULE // determine speed from doppler shift of Earth-based signals
	{
		name = ModuleKpuSensor
		sensorType = orbSpeed
		inherentRes = 10
		sensorUnit = m/s
		requireRadio = true
	}
}

// Ranger Block III
@PART[probeCoreHex]:NEEDS[RP-0]
{
	MODULE
	{
		name = ModuleKpuProcessor
		hasLevelTrigger = false
		hasLogicOps = true
		hasArithOps = true
		imemWords = 128
		latches = 1
		timers = 1
	}
	MODULE // some orientation
	{
		name = ModuleKpuOrientation
		orbVertical = true
		inherentRes = 1
	}
	MODULE // determine speed from doppler shift of Earth-based signals
	{
		name = ModuleKpuSensor
		sensorType = orbSpeed
		inherentRes = 10
		sensorUnit = m/s
		requireRadio = true
	}
}

// Generic satellite bus
@PART[probeCoreCube|novapod|UAEcubplate|torpod|sondex2pod|explonpod|mk2DroneCore|B9_Cockpit_D25|B9_Cockpit_MK1_Control_ACU|FASAICBMProbe|HECS2_ProbeCore]:NEEDS[RP-0]
{
	MODULE
	{
		name = ModuleKpuProcessor
		hasLevelTrigger = true
		hasLogicOps = true
		hasArithOps = true
		imemWords = 256
		latches = 2
		timers = 2
	}
	MODULE // full orientation
	{
		name = ModuleKpuOrientation
		orbVertical = true
		customHP = true
		customHPR = true
		inherentRes = 0.5
	}
	MODULE // determine speed from doppler shift of Earth-based signals
	{
		name = ModuleKpuSensor
		sensorType = orbSpeed
		inherentRes = 10
		sensorUnit = m/s
		requireRadio = true
	}
	MODULE // landing radar
	{
		name = ModuleKpuSensor
		maxAltitude = 200000
		sensorType = srfHeight
		inherentRes = 10
		sensorUnit = m
	}
	MODULE
	{
		name = ModuleKpuSensor
		maxAltitude = 50000
		sensorType = srfSpeed
		inherentRes = 0.2
		sensorUnit = m/s
	}
	MODULE
	{
		name = ModuleKpuSensor
		maxAltitude = 50000
		sensorType = srfVerticalSpeed
		inherentRes = 0.2
		sensorUnit = m/s
	}
	MODULE
	{
		name = ModuleKpuOrientation
		maxAltitude = 50000
		srfPrograde = true // implies also srfRetrograde
		srfVertical = true
		customHP = true
		inherentRes = 1.0
	}
}

// *** Guidance units (including stages)
// Able guidance
@PART[RP0probeAvionics0-81m]:NEEDS[RP-0]
{
	MODULE
	{
		name = ModuleKpuProcessor
		hasLevelTrigger = false
		hasLogicOps = false
		hasArithOps = false
		imemWords = 64
		timers = 1
	}
	MODULE // can point into wind
	{
		name = ModuleKpuOrientation
		srfPrograde = true
		inherentRes = 0.5
		requireBody = Earth
		maxAltitude = 80000
	}
	MODULE // with signal even better
	{
		name = ModuleKpuOrientation
		customHP = true
		srfPrograde = true
		orbPrograde = true
		inherentRes = 0.2
		requireBody = Earth
		maxAltitude = 500000
		requireRadio = true
	}
}

// Delta (i.e. AbleStar or Delta E and above)
@PART[RP0probeAvionics1-4m]:NEEDS[RP-0]
{
	MODULE
	{
		name = ModuleKpuProcessor
		hasLevelTrigger = false
		hasLogicOps = true
		hasArithOps = false
		imemWords = 128
		timers = 1
	}
	MODULE // full orientation near Earth
	{
		name = ModuleKpuOrientation
		customHP = true
		customHPR = true
		srfPrograde = true
		inherentRes = 0.5
		requireBody = Earth
		maxAltitude = 300000
	}
	MODULE // with signal even better
	{
		name = ModuleKpuOrientation
		customHP = true
		customHPR = true
		srfPrograde = true
		orbPrograde = true
		inherentRes = 0.2
		requireBody = Earth
		maxAltitude = 500000
		requireRadio = true
	}
}

// Agena
@PART[FASAAgenaProbe|RP0probeAvionics1-5m]:NEEDS[RP-0]
{
	MODULE
	{
		name = ModuleKpuProcessor
		hasLevelTrigger = false
		hasLogicOps = true
		hasArithOps = true
		imemWords = 128
		timers = 1
		latches = 1
	}
	MODULE // full orientation near Earth
	{
		name = ModuleKpuOrientation
		customHP = true
		customHPR = true
		srfPrograde = true
		inherentRes = 0.5
		requireBody = Earth
		maxAltitude = 400000
	}
	MODULE // with signal even better
	{
		name = ModuleKpuOrientation
		customHP = true
		customHPR = true
		srfPrograde = true
		orbPrograde = true
		inherentRes = 0.2
		requireBody = Earth
		maxAltitude = 800000
		requireRadio = true
	}
	MODULE // Get location from ground signals
	{
		name = ModuleKpuSensorMaster
		maxAltitude = 800000
		requireBody = Earth
		requireRadio = true
	}
	MODULE
	{
		name = ModuleKpuSensor
		sensorType = altitude
		inherentRes = 100
		sensorUnit = m
	}
	MODULE
	{
		name = ModuleKpuSensor
		sensorType = longitude
		inherentRes = 0.25
		sensorUnit = °
	}
	MODULE
	{
		name = ModuleKpuSensor
		sensorType = latitude
		inherentRes = 0.25
		sensorUnit = °
	}
	MODULE
	{
		name = ModuleKpuSensor
		sensorType = orbSpeed
		inherentRes = 5
		sensorUnit = m/s
	}
	MODULE
	{
		name = ModuleKpuSensor
		sensorType = orbPeriapsis
		inherentRes = 100
		sensorUnit = m
	}
	MODULE
	{
		name = ModuleKpuSensor
		sensorType = orbApoapsis
		inherentRes = 100
		sensorUnit = m
	}
	MODULE
	{
		name = ModuleKpuSensor
		sensorType = orbInclination
		inherentRes = 0.25
		sensorUnit = °
	}
	MODULE
	{
		name = ModuleKpuSensor
		sensorType = orbANLongitude
		inherentRes = 0.25
		sensorUnit = °
	}
	MODULE
	{
		name = ModuleKpuSensor
		sensorType = orbPeriapsisLongitude
		inherentRes = 0.25
		sensorUnit = °
	}
}

// Various Saturn IUs
@PART[SXT375mProbe|FASAApolloIU|FASAApalloLFTJ2Plate|RP0probeAvionics66m]:NEEDS[RP-0]
{
	MODULE
	{
		name = ModuleKpuProcessor
		hasLevelTrigger = true
		hasLogicOps = true
		hasArithOps = true
		imemWords = 512
		timers = 2
		latches = 4
	}
	MODULE // full orientation near Earth
	{
		name = ModuleKpuOrientation
		customHP = true
		customHPR = true
		srfPrograde = true
		inherentRes = 0.5
		requireBody = Earth
		maxAltitude = 800000
	}
	MODULE // with signal even better
	{
		name = ModuleKpuOrientation
		customHP = true
		customHPR = true
		srfPrograde = true
		orbPrograde = true
		inherentRes = 0.2
		requireBody = Earth
		maxAltitude = 1200000
		requireRadio = true
	}
	MODULE // Get location from ground signals
	{
		name = ModuleKpuSensorMaster
		maxAltitude = 1200000
		requireBody = Earth
		requireRadio = true
	}
	MODULE
	{
		name = ModuleKpuSensor
		sensorType = altitude
		inherentRes = 100
		sensorUnit = m
	}
	MODULE
	{
		name = ModuleKpuSensor
		sensorType = longitude
		inherentRes = 0.25
		sensorUnit = °
	}
	MODULE
	{
		name = ModuleKpuSensor
		sensorType = latitude
		inherentRes = 0.25
		sensorUnit = °
	}
	MODULE
	{
		name = ModuleKpuSensor
		sensorType = orbSpeed
		inherentRes = 5
		sensorUnit = m/s
	}
	MODULE
	{
		name = ModuleKpuSensor
		sensorType = orbPeriapsis
		inherentRes = 100
		sensorUnit = m
	}
	MODULE
	{
		name = ModuleKpuSensor
		sensorType = orbApoapsis
		inherentRes = 100
		sensorUnit = m
	}
	MODULE
	{
		name = ModuleKpuSensor
		sensorType = orbInclination
		inherentRes = 0.25
		sensorUnit = °
	}
	MODULE
	{
		name = ModuleKpuSensor
		sensorType = orbANLongitude
		inherentRes = 0.25
		sensorUnit = °
	}
	MODULE
	{
		name = ModuleKpuSensor
		sensorType = orbPeriapsisLongitude
		inherentRes = 0.25
		sensorUnit = °
	}
}

// ** General ML upper stages (Titan, Centaur) and other mid-period guidance (e.g. Atlas, excluding D/MALV)
@PART[FASAGeminiLFECentarTwin|TitanIUpper|FASAGeminiLFTMed|FASAGeminiLFTMedWhite|FASAGeminiLFTCentar|FASAGeminiLFTCentarCSM_D2|FASAGeminiLFTCentarCSM_D3|FASAGeminiLFTCentarCSM_D5|FASAGeminiLFTCentarCSM_T|FASA_Atlas_LFT_Cone2|FASAAtlasFMod|FASAAtlasH|FASAMercuryAtlasLFTLong|FASAAtlasSLV3A|FASAAtlasLV3C|FASAAtlasSLV3C|GuidanceLate1m]:NEEDS[RP-0]
{
	MODULE
	{
		name = ModuleKpuProcessor
		hasLevelTrigger = false
		hasLogicOps = true
		hasArithOps = true
		imemWords = 256
		timers = 2
		latches = 2
	}
	MODULE // full orientation near Earth
	{
		name = ModuleKpuOrientation
		customHP = true
		customHPR = true
		srfPrograde = true
		inherentRes = 0.5
		requireBody = Earth
		maxAltitude = 500000
	}
	MODULE // with signal even better
	{
		name = ModuleKpuOrientation
		customHP = true
		customHPR = true
		srfPrograde = true
		orbPrograde = true
		inherentRes = 0.2
		requireBody = Earth
		maxAltitude = 800000
		requireRadio = true
	}
	MODULE // Get location from ground signals
	{
		name = ModuleKpuSensorMaster
		maxAltitude = 800000
		requireBody = Earth
		requireRadio = true
	}
	MODULE
	{
		name = ModuleKpuSensor
		sensorType = altitude
		inherentRes = 100
		sensorUnit = m
	}
	MODULE
	{
		name = ModuleKpuSensor
		sensorType = longitude
		inherentRes = 0.25
		sensorUnit = °
	}
	MODULE
	{
		name = ModuleKpuSensor
		sensorType = latitude
		inherentRes = 0.25
		sensorUnit = °
	}
	MODULE
	{
		name = ModuleKpuSensor
		sensorType = orbSpeed
		inherentRes = 5
		sensorUnit = m/s
	}
	MODULE
	{
		name = ModuleKpuSensor
		sensorType = orbPeriapsis
		inherentRes = 100
		sensorUnit = m
	}
	MODULE
	{
		name = ModuleKpuSensor
		sensorType = orbApoapsis
		inherentRes = 100
		sensorUnit = m
	}
	MODULE
	{
		name = ModuleKpuSensor
		sensorType = orbInclination
		inherentRes = 0.25
		sensorUnit = °
	}
	MODULE
	{
		name = ModuleKpuSensor
		sensorType = orbANLongitude
		inherentRes = 0.25
		sensorUnit = °
	}
	MODULE
	{
		name = ModuleKpuSensor
		sensorType = orbPeriapsisLongitude
		inherentRes = 0.25
		sensorUnit = °
	}
}
